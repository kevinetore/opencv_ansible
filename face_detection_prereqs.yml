---
- hosts: all
  become: true
  vars:
    tmp_path: "/home/odroid/setup/download" 
    opencv_version: 4.7.0
    dlib_version: 19.24
    python_packages:
      - name: numpy

  tasks:
  - name: Install developer and compile tools
    apt: 
      name:
      - build-essential
      - cmake
      - git
      - pkg-config
      - unzip
      - python3-dev
      - libopenblas-dev
      - liblapack-dev
      - libx11-dev
      - libgtk-3-dev
      - libatlas-base-dev
      - libboost-python-dev
      state: latest

  - name: Create tmp directory
    file:
      path: "{{ tmp_path }}"
      state: directory

  - name: Install python packages
    pip:
      name: "{{ item.name }}"
      executable: pip3
    with_items: "{{ python_packages }}"
    notify:
      - test python packages

  - name: Download and unzip OpenCV
    unarchive:
      src: "https://github.com/opencv/opencv/archive/{{ opencv_version }}.zip"
      dest: "{{ tmp_path }}"
      copy: no

  - name: Download and unzip OpenCV contrib
    unarchive:
      src: "https://github.com/opencv/opencv_contrib/archive/{{ opencv_version }}.zip"
      dest: "{{ tmp_path }}"
      copy: no

  - name: Create build directory
    file:
      path: "{{ tmp_path }}/opencv-{{ opencv_version }}/build"
      state: directory

  - name: Make the opencv build artifacts
    shell: |
      cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D INSTALL_C_EXAMPLES=OFF \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D OPENCV_EXTRA_MODULES_PATH={{ tmp_path }}/opencv_contrib-{{ opencv_version }}/modules \
      -D BUILD_EXAMPLES=ON {{ tmp_path }}/opencv-{{ opencv_version }}
    args:
      chdir: "{{ tmp_path }}/opencv-{{ opencv_version }}/build"
      executable: /bin/bash

  - name: Compile the opencv project
    shell: make -j 4
    args:
      chdir: "{{ tmp_path }}/opencv-{{ opencv_version }}/build"
      executable: /bin/bash

  - name: Install opencv
    shell: |
      make install
      ldconfig
    args:
      chdir: "{{ tmp_path }}/opencv-{{ opencv_version }}/build"
      executable: /bin/bash

  - name: Download and unzip dlib
    unarchive:
      src: "http://dlib.net/files/dlib-{{ dlib_version }}.tar.bz2"
      dest: "{{ tmp_path }}"
      copy: no

  - name: Create dlib build directory
    file:
      path: "{{ tmp_path }}/dlib-{{ dlib_version }}/build"
      state: directory

  - name: Make the dlib build artifacts
    shell: |
      cmake -D CMAKE_BUILD_TYPE=RELEASE \
      -D INSTALL_C_EXAMPLES=OFF \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D CMAKE_INSTALL_LIBDIR=/usr/local/lib/python3.8/dist-packages \
      -D BUILD_EXAMPLES=ON {{ tmp_path }}/dlib-{{ dlib_version }}
    args:
      chdir: "{{ tmp_path }}/dlib-{{ dlib_version }}/build"
      executable: /bin/bash
    register: dlib_build_output

  - name: Compile the dlib project
    shell: make -j 4
    args:
      chdir: "{{ tmp_path }}/dlib-{{ dlib_version }}/build"
      executable: /bin/bash

  - name: Install dlib
    shell: |
      make install
      ldconfig
    args:
      chdir: "{{ tmp_path }}/dlib-{{ dlib_version }}/build"
      executable: /bin/bash
    register: dlib_installation

  - name: debug dlib installation output
    debug:
      var: dlib_installation

  - name: debug dlib build output
    debug:
      var: dlib_build_output

  handlers:
    - name: test python packages
      command: python3 -c "import {{ item.name }}"
      with_items: "{{ python_packages }}"
      register: test_results
      notify: print test results

    - name: print test results
      debug:
        msg: "{{ test_results }}"
